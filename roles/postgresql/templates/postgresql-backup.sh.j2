#!/bin/bash
# PostgreSQL Backup Script
# Generated by Ansible PostgreSQL Role for Trackify Project

set -euo pipefail

# Configuration
BACKUP_DIR="{{ postgresql_backup_dir }}"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="${BACKUP_DIR}/backup_${TIMESTAMP}.log"

# Database list
DATABASES=(
{% for db in postgresql_databases %}
    "{{ db.name }}"
{% endfor %}
)

# Logging function
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Create backup directory if it doesn't exist
mkdir -p "$BACKUP_DIR"

# Start backup process
log "Starting PostgreSQL backup process"

# Backup each database
for DB_NAME in "${DATABASES[@]}"; do
    BACKUP_FILE="${BACKUP_DIR}/${DB_NAME}_${TIMESTAMP}.sql"
    
    log "Starting backup of database: $DB_NAME"
    
    # Perform the backup
    if pg_dump -h localhost -p {{ postgresql_port }} -U postgres -d "$DB_NAME" | gzip > "${BACKUP_FILE}.gz"; then
        log "Backup completed successfully: ${BACKUP_FILE}.gz"
        
        # Get backup file size
        BACKUP_SIZE=$(du -h "${BACKUP_FILE}.gz" | cut -f1)
        log "Backup file size: $BACKUP_SIZE"
        
        # Verify backup integrity
        if gunzip -t "${BACKUP_FILE}.gz"; then
            log "Backup file integrity verified for $DB_NAME"
        else
            log "ERROR: Backup file integrity check failed for $DB_NAME"
            exit 1
        fi
    else
        log "ERROR: Backup failed for database $DB_NAME"
        exit 1
    fi
done

# Global backup (schema and roles)
GLOBAL_BACKUP_FILE="${BACKUP_DIR}/global_${TIMESTAMP}.sql"
log "Creating global backup (roles and tablespaces)"

if pg_dumpall -h localhost -p {{ postgresql_port }} -U postgres --globals-only | gzip > "${GLOBAL_BACKUP_FILE}.gz"; then
    log "Global backup completed successfully: ${GLOBAL_BACKUP_FILE}.gz"
else
    log "ERROR: Global backup failed"
    exit 1
fi

# Cleanup old log files (keep last 30 days)
find "$BACKUP_DIR" -name "backup_*.log" -mtime +30 -delete 2>/dev/null || true

log "Backup process completed successfully"

# Send backup status to monitoring (if available)
if command -v curl >/dev/null 2>&1; then
    {% set monitoring_host = '192.168.1.25' %}
    {% if groups is defined and 'monitoring' in groups and groups['monitoring']|length > 0 %}
    {% set monitoring_host = hostvars[groups['monitoring'][0]]['ansible_host'] | default('192.168.1.25') %}
    {% endif %}
    curl -s -X POST "http://{{ monitoring_host }}:9091/metrics/job/postgresql_backup/instance/{{ inventory_hostname }}" \
         --data-binary @- <<EOF || true
postgresql_backup_success 1
postgresql_backup_timestamp $(date +%s)
