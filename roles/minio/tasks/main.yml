---
- name: Create minio user
  user:
    name: "{{ minio_user }}"
    system: true
    shell: /bin/false
    home: "{{ minio_home_dir }}"
    create_home: true
  become: true

- name: Create minio directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ minio_user }}"
    group: "{{ minio_user }}"
    mode: '0755'
  become: true
  loop:
    - "{{ minio_data_dir }}"
    - "{{ minio_config_dir }}"
    - "{{ minio_log_dir }}"
    - /usr/local/bin

- name: Download MinIO server binary
  get_url:
    url: "{{ minio_download_url }}"
    dest: /usr/local/bin/minio
    mode: '0755'
    owner: root
    group: root
    timeout: 30
  become: true
  notify: restart minio

- name: Download MinIO client binary
  get_url:
    url: "{{ minio_client_download_url }}"
    dest: /usr/local/bin/mc
    mode: '0755'
    owner: root
    group: root
    timeout: 30
  become: true

- name: Create MinIO configuration file
  template:
    src: minio.j2
    dest: "{{ minio_config_dir }}/minio"
    owner: "{{ minio_user }}"
    group: "{{ minio_user }}"
    mode: '0640'
  become: true
  notify: restart minio

- name: Create MinIO systemd service file
  template:
    src: minio.service.j2
    dest: /etc/systemd/system/minio.service
    owner: root
    group: root
    mode: '0644'
  become: true
  notify:
    - reload systemd
    - restart minio

- name: Create MinIO logrotate configuration
  template:
    src: minio.logrotate.j2
    dest: /etc/logrotate.d/minio
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Set proper ownership for MinIO directories
  file:
    path: "{{ item }}"
    owner: "{{ minio_user }}"
    group: "{{ minio_user }}"
    recurse: true
  become: true
  loop:
    - "{{ minio_data_dir }}"
    - "{{ minio_config_dir }}"
    - "{{ minio_log_dir }}"

- name: Start and enable MinIO service
  systemd:
    name: minio
    state: started
    enabled: true
    daemon_reload: true
  become: true

- name: Configure firewall for MinIO
  firewalld:
    port: "9000/tcp"
    permanent: yes
    state: enabled
    zone: "internal"
    immediate: yes
  become: true
  notify: reload firewalld

- name: Configure firewall for MinIO console
  firewalld:
    port: "9001/tcp"
    permanent: yes
    state: enabled
    zone: "internal"
    immediate: yes
  become: true
  notify: reload firewalld

- name: Wait for MinIO to be ready
  uri:
    url: "http://{{ minio_bind_address }}:{{ minio_port }}/minio/health/ready"
    method: GET
    status_code: 200
  register: minio_health
  until: minio_health.status == 200
  retries: 30
  delay: 2

- name: Configure MinIO client alias
  command: >
    /usr/local/bin/mc alias set {{ minio_alias }}
    http://{{ minio_bind_address }}:{{ minio_port }}
    {{ minio_root_user }}
    {{ minio_root_password }}
  become: true
  become_user: "{{ minio_user }}"
  changed_when: false

- name: Check existing buckets
  command: /usr/local/bin/mc ls {{ minio_alias }}
  become: true
  become_user: "{{ minio_user }}"
  register: existing_buckets
  changed_when: false
  failed_when: false

- name: Create MinIO buckets
  command: >
    /usr/local/bin/mc mb {{ minio_alias }}/{{ item.name }}
  become: true
  become_user: "{{ minio_user }}"
  loop: "{{ minio_buckets }}"
  register: bucket_creation
  changed_when: "'Bucket created successfully' in bucket_creation.stdout"
  failed_when: false
  when: "item.name not in existing_buckets.stdout"

- name: Set bucket policies
  command: >
    /usr/local/bin/mc anonymous set {{ item.policy | default('none') }}
    {{ minio_alias }}/{{ item.name }}
  become: true
  become_user: "{{ minio_user }}"
  loop: "{{ minio_buckets }}"
  when: item.policy is defined
  register: policy_set
  changed_when: "'Access permission for' in policy_set.stdout and 'is set to' in policy_set.stdout"
  failed_when: false

- name: Check existing users
  command: /usr/local/bin/mc admin user list {{ minio_alias }}
  become: true
  become_user: "{{ minio_user }}"
  register: existing_users
  changed_when: false
  failed_when: false

- name: Create custom MinIO policies
  shell: |
    cat <<'EOF' | /usr/local/bin/mc admin policy create {{ minio_alias }} {{ item.name }} /dev/stdin
    {
      "Version": "2012-10-17",
      "Statement": {{ item.statements | to_json }}
    }
    EOF
  become: true
  become_user: "{{ minio_user }}"
  loop: "{{ minio_policies | default([]) }}"
  register: policy_creation
  changed_when: "'Policy `{{ item.name }}` is created successfully' in policy_creation.stdout"
  failed_when: false

- name: Create MinIO users
  command: >
    /usr/local/bin/mc admin user add {{ minio_alias }}
    {{ item.username }} {{ item.password }}
  become: true
  become_user: "{{ minio_user }}"
  loop: "{{ minio_users | default([]) }}"
  register: user_creation
  changed_when: "'Added user' in user_creation.stdout"
  failed_when: false
  when: "item.username not in existing_users.stdout"

- name: Apply policies to users
  command: >
    /usr/local/bin/mc admin policy attach {{ minio_alias }}
    {{ item.policy }} --user {{ item.username }}
  become: true
  become_user: "{{ minio_user }}"
  loop: "{{ minio_users | default([]) }}"
  when: 
    - item.policy is defined
    - "item.username in existing_users.stdout or user_creation is defined"
  register: policy_attach
  changed_when: "'Policy `{{ item.policy }}` is attached to user `{{ item.username }}`' in policy_attach.stdout"
  failed_when: false